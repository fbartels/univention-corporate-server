#!/usr/share/ucs-test/runner /usr/share/ucs-test/selenium
# -*- coding: utf-8 -*-
## desc: test the 'Process overview' module
## packages:
##  - univention-management-console-module-top
## roles-not:
##  - basesystem
## tags:
##  - skip_admember
## join: true
## exposure: dangerous

import re
import psutil
import subprocess

from selenium.common.exceptions import NoSuchElementException

from univention.testing import selenium
from univention.admin import localization

translator = localization.translation('ucs-test-selenium')
_ = translator.translate


# takes an xpath and expands the
# @containsClass="className"
# attribute to
# contains(concat(" ", normalize-space(@class), " "), " className ")
def cc(xpath):
	pattern = r'(?<=\[)@containsClass=([\"\'])(.*?)\1(?=\])'
	replacement = r'contains(concat(\1 \1, normalize-space(@class), \1 \1), \1 \2 \1)'
	return re.sub(pattern, replacement, xpath)


class UmcError(Exception):
	pass


class UMCTester(object):

	def test_umc(self):
		self.selenium.do_login()
		self.selenium.open_module(_('Process overview'))

		self.search('', _('All'))
		self.compare_umc_process_count_with(len(psutil.pids()))
		self.search('root', _('User'))
		self.compare_umc_process_count_with(len([pid for pid in psutil.process_iter() if pid.username() == 'root']))

		p = subprocess.Popen(['sleep', '5000'])
		self.check_if_process_is_searchable(p.pid, _('PID'), p.pid)
		self.check_if_process_is_searchable(p.pid, _('Command'), 'sleep 5000')

		self.kill_process_and_check_if_gone(p, force=False)
		p = subprocess.Popen(['sleep', '5000'])
		self.kill_process_and_check_if_gone(p, force=True)


	def compare_umc_process_count_with(self, count):
		process_count_umc = self.get_process_count_umc()
		process_count_psutil = count
		if abs(process_count_umc - process_count_psutil) >= 5:
			raise UmcError('The process count in the UMC grid and psutil differs by more then 5. UMC - %s ; psutil - %s' % (process_count_umc, process_count_psutil))
		elif process_count_umc - process_count_psutil != 0:
			print "####### WARNING Process count in the UMC grid and psutil differs by %s" % abs(process_count_umc - process_count_psutil)


	def get_process_count_umc(self):
		grid_status = self.selenium.driver.find_element_by_css_selector('.umcGridStatus')
		process_count_umc = int(re.search(r' (\d*) selected', grid_status.text).group(1))
		return process_count_umc
	

	def check_if_process_is_searchable(self, pid, category, search_value):
		self.search(search_value, category)
		try:
			self.selenium.driver.find_element_by_xpath(self._pid_xpath(pid))
		except NoSuchElementException:
			raise UmcError('The created process was not searchable via the "%s" category' % category)


	def kill_process_and_check_if_gone(self, p, force):
		self.search(p.pid, _('PID'))
		self.selenium.click_element(self._pid_xpath(p.pid))

		button = _('Force termination') if force else _('Terminate')
		self.selenium.click_button(button)
		self.selenium.click_button(_('OK'))
		signal = 'SIGKILL' if force else 'SIGTERM'
		self.selenium.wait_for_text(_('Signal (%s) sent successfully') % signal)
		self.selenium.wait_until_all_standby_animations_disappeared()
		p.poll()
		self.search(p.pid)
		try:
			self.selenium.driver.find_element_by_xpath(self._pid_xpath(p.pid))
		except NoSuchElementException:
			pass
		else:
			raise UmcError('Error with "%s". The process was termined via UMC but was still visible in the UMC grid' % 'Force termination' if force else 'Terminate')
		if psutil.pid_exists(p.pid):
			raise UmcError('Error with "%s". The process was terminated via UMC but still existed (psutil.pid_exists)' % 'Force termination' if force else 'Terminate')


	def search(self, search_value, category=None):
		if category:
			self.choose_category(category)
		self.selenium.enter_input('pattern', search_value)
		self.selenium.submit_input('pattern')
		self.selenium.wait_until_all_standby_animations_disappeared()


	def choose_category(self, category):
		button_xpath = cc('//label[text() = "%s"]/ancestor::div[@containsClass="umcLabelPane-dijitComboBox"]//div[@containsClass="dijitArrowButton"]' % _('Category'))
		button = self.selenium.driver.find_element_by_xpath(button_xpath)
		button.click()

		choice_xpath = cc('//div[@containsClass="dijitComboBoxMenuPopup"]//div[text() = "%s"]' % category)
		self.selenium.wait_until_element_visible(choice_xpath)
		choice = self.selenium.driver.find_element_by_xpath(choice_xpath)
		choice.click()


	def _pid_xpath(self, pid):
		return  cc('//td[@containsClass="field-pid"]/descendant-or-self::*[text() = "%s"]' % pid)


if __name__ == '__main__':
	with selenium.UMCSeleniumTest() as s:
		umc_tester = UMCTester()
		umc_tester.selenium = s

		umc_tester.test_umc()
